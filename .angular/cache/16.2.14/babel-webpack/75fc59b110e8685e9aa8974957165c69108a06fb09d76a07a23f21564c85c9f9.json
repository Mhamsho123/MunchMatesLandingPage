{"ast":null,"code":"import { Directive, Input, InjectionToken, inject, PLATFORM_ID, isDevMode, ɵɵdefineInjectable, ɵɵinject, Injectable, Inject, Optional, ElementRef, Host, APP_INITIALIZER, APP_BOOTSTRAP_LISTENER, NgModule } from '@angular/core';\nimport { isPlatformBrowser, DOCUMENT, CommonModule } from '@angular/common';\nimport { fromEvent } from 'rxjs';\nimport { __awaiter } from 'tslib';\nimport { Router, NavigationEnd } from '@angular/router';\nimport { filter, skip } from 'rxjs/operators';\nclass GaEventCategoryDirective {\n  constructor() {}\n}\n/**\n * Provide a Injection Token to global settings.\n */\nconst NGX_GOOGLE_ANALYTICS_SETTINGS_TOKEN = new InjectionToken('ngx-google-analytics-settings', {\n  factory: () => ({\n    trackingCode: '',\n    enableTracing: false\n  })\n});\n\n/**\n * Check if this environment can access Window object and return window or null if false.\n */\nfunction getWindow(platformId) {\n  return isPlatformBrowser(platformId) ? window : null;\n}\n/**\n * Provide DOM Window reference or null if the environment is not a Browser.\n */\nconst NGX_WINDOW = new InjectionToken('ngx-window', {\n  providedIn: 'root',\n  factory: () => getWindow(inject(PLATFORM_ID))\n});\n\n/**\n * Check if there is some global function called gtag on Window object, or create an empty function to doesn't brake codes...\n */\nfunction getDataLayerFn(window) {\n  return window ? window['dataLayer'] = window['dataLayer'] || [] : null;\n}\n/**\n * Provides an injection token to access Google Analytics DataLayer Collection\n */\nconst NGX_DATA_LAYER = new InjectionToken('ngx-data-layer', {\n  providedIn: 'root',\n  factory: () => getDataLayerFn(inject(NGX_WINDOW))\n});\n\n/**\n * Check if there is some global function called gtag on Window object, or create an empty function to doesn't brake codes...\n */\nfunction getGtagFn(window, dataLayer) {\n  return window ? window['gtag'] = window['gtag'] || function () {\n    dataLayer.push(arguments);\n  } : null;\n}\n/**\n * Provides an injection token to access Google Analytics Gtag Function\n */\nconst NGX_GTAG_FN = new InjectionToken('ngx-gtag-fn', {\n  providedIn: 'root',\n  factory: () => getGtagFn(inject(NGX_WINDOW), inject(NGX_DATA_LAYER))\n});\nlet GoogleAnalyticsService = /*#__PURE__*/(() => {\n  class GoogleAnalyticsService {\n    constructor(settings, _document, _gtag) {\n      this.settings = settings;\n      this._document = _document;\n      this._gtag = _gtag;\n    }\n    get document() {\n      return this._document;\n    }\n    throw(err) {\n      if ((this.settings.enableTracing || isDevMode()) && console && console.error) {\n        console.error(err);\n      }\n    }\n    /** @todo Change this to `Object.fromEntity()` in the future... */\n    toKeyValue(map) {\n      return map.size > 0 ? Array.from(map).reduce((obj, [key, value]) => Object.defineProperty(obj, key, {\n        value,\n        enumerable: true\n      }), {}) : undefined;\n    }\n    /**\n     * Call native GA Tag\n     */\n    gtag(...args) {\n      try {\n        this._gtag(...args.filter(x => x !== undefined));\n      } catch (err) {\n        this.throw(err);\n      }\n    }\n    /**\n     * Send an event trigger to GA. It is the same as call:\n     * ```js\n     * gtag('event', 'video_auto_play_start', {\n     *   'event_label': 'My promotional video',\n     *   'event_category': 'video_auto_play'\n     * });\n     * ```\n     *\n     * @param action 'video_auto_play_start'\n     * @param category 'video_auto_play'\n     * @param label 'My promotional video'\n     * @param value An value to measure something\n     */\n    event(action, category, label, value, interaction) {\n      try {\n        const opt = new Map();\n        if (category) {\n          opt.set('event_category', category);\n        }\n        if (label) {\n          opt.set('event_label', label);\n        }\n        if (value) {\n          opt.set('value', value);\n        }\n        if (interaction !== undefined) {\n          opt.set('interaction', interaction);\n        }\n        const params = this.toKeyValue(opt);\n        if (params) {\n          this.gtag('event', action, params);\n        } else {\n          this.gtag('event', action);\n        }\n      } catch (error) {\n        this.throw(error);\n      }\n    }\n    /**\n     * Send an page view event. This is the same as\n     *\n     * ```js\n     * gtag('config', 'GA_TRACKING_ID', {\n     *   'page_title' : 'Homepage',\n     *   'page_path': '/home'\n     * });\n     * ```\n     *\n     * The tracking ID is injected automatically by Inject Token NGX_GOOGLE_ANALYTICS_SETTINGS_TOKEN\n     *\n     * @param path /home\n     * @param title Homepage\n     * @param location '{ page_location }'\n     * @param options '{ ... custom dimentions }'\n     */\n    pageView(path, title, location, options) {\n      try {\n        const opt = new Map([['page_path', path]]);\n        if (title) {\n          opt.set('page_title', title);\n        }\n        if (location || this.document) {\n          opt.set('page_location', location || this.document.location.href);\n        }\n        if (options) {\n          Object.entries(options).map(([key, value]) => opt.set(key, value));\n        }\n        this.gtag('config', this.settings.trackingCode, this.toKeyValue(opt));\n      } catch (error) {\n        this.throw(error);\n      }\n    }\n    /**\n     * Send an event to report a App Page View. It is the same as\n     *\n     * ```js\n     * gtag('event', 'screen_view', {\n     *   'app_name': 'myAppName',\n     *   'screen_name' : 'Home'\n     * });\n     *\n     * ```\n     *\n     * @param screen 'screen_name'\n     * @param appName 'app_name'\n     * @param appId 'app_id'\n     * @param appVersion 'app_version'\n     * @param installerId 'app_installer_id'\n     */\n    appView(screen, appName, appId, appVersion, installerId) {\n      try {\n        const opt = new Map([['screen_name', screen], ['app_name', appName]]);\n        if (appId) {\n          opt.set('app_id', appId);\n        }\n        if (appVersion) {\n          opt.set('app_version', appVersion);\n        }\n        if (installerId) {\n          opt.set('app_installer_id', installerId);\n        }\n        this.gtag('event', 'screen_view', this.toKeyValue(opt));\n      } catch (error) {\n        this.throw(error);\n      }\n    }\n    /**\n     * Defines persistent values on GoogleAnalytics\n     *\n     * @see https://developers.google.com/analytics/devguides/collection/gtagjs/setting-values\n     *\n     * ```js\n     * gtag('set', {\n     *   'currency': 'USD',\n     *   'country': 'US'\n     * });\n     * ```\n     */\n    set(...options) {\n      try {\n        this._gtag('set', ...options);\n      } catch (err) {\n        this.throw(err);\n      }\n    }\n    /**\n     * Send an event to GA to report an application error. It is the same as\n     *\n     * ```js\n     * gtag('event', 'exception', {\n     *   'description': 'error_description',\n     *   'fatal': false   // set to true if the error is fatal\n     * });\n     * ```\n     *\n     * @param description 'error_description'\n     * @param fatal set to true if the error is fatal\n     */\n    exception(description, fatal) {\n      try {\n        const opt = new Map();\n        if (description) {\n          opt.set('description', description);\n        }\n        if (fatal) {\n          opt.set('fatal', fatal);\n        }\n        const params = this.toKeyValue(opt);\n        if (params) {\n          this.gtag('event', 'exception', this.toKeyValue(opt));\n        } else {\n          this.gtag('event', 'exception');\n        }\n      } catch (error) {\n        this.throw(error);\n      }\n    }\n  }\n  GoogleAnalyticsService.ɵprov = ɵɵdefineInjectable({\n    factory: function GoogleAnalyticsService_Factory() {\n      return new GoogleAnalyticsService(ɵɵinject(NGX_GOOGLE_ANALYTICS_SETTINGS_TOKEN), ɵɵinject(DOCUMENT), ɵɵinject(NGX_GTAG_FN));\n    },\n    token: GoogleAnalyticsService,\n    providedIn: \"root\"\n  });\n  return GoogleAnalyticsService;\n})();\nclass GaEventDirective {\n  constructor(gaCategoryDirective, gaService, settings, el) {\n    this.gaCategoryDirective = gaCategoryDirective;\n    this.gaService = gaService;\n    this.settings = settings;\n    this.el = el;\n    this.gaBind = 'click';\n  }\n  set gaBind(gaBind) {\n    if (this.bindSubscription) {\n      this.bindSubscription.unsubscribe();\n    }\n    this._gaBind = gaBind;\n    this.bindSubscription = fromEvent(this.el.nativeElement, gaBind).subscribe(() => this.trigger());\n  }\n  get gaBind() {\n    return this._gaBind;\n  }\n  ngOnDestroy() {\n    if (this.bindSubscription) {\n      this.bindSubscription.unsubscribe();\n    }\n  }\n  trigger() {\n    try {\n      // Observação: não é obrigatório especificar uma categoria, uma etiqueta ou um valor. Consulte Eventos padrão do Google Analytics abaixo.\n      // if (!this.$gaCategoryDirective) {\n      //   throw new Error('You must provide a gaCategory attribute w/ gaEvent Directive.');\n      // }\n      if (!this.gaAction && !this.gaEvent) {\n        throw new Error('You must provide a gaAction attribute to identify this event.');\n      }\n      this.gaService.event(this.gaAction || this.gaEvent, this.gaCategoryDirective ? this.gaCategoryDirective.gaCategory : undefined, this.gaLabel || this.label, this.gaValue, this.gaInteraction);\n    } catch (err) {\n      this.throw(err);\n    }\n  }\n  throw(err) {\n    if ((isDevMode() || this.settings.enableTracing) && console && console.warn) {\n      console.warn(err);\n    }\n  }\n}\nclass GaEventFormInputDirective {\n  constructor(gaEvent) {\n    this.gaEvent = gaEvent;\n    this.gaBind = 'focus';\n  }\n  set gaBind(bind) {\n    if (this.gaEvent) {\n      this.gaEvent.gaBind = bind;\n    }\n  }\n}\nvar GaActionEnum = /*#__PURE__*/function (GaActionEnum) {\n  GaActionEnum[\"ADD_PAYMENT_INFO\"] = \"add_payment_info\";\n  GaActionEnum[\"ADD_TO_CART\"] = \"add_to_cart\";\n  GaActionEnum[\"ADD_TO_WISHLIST\"] = \"add_to_wishlist\";\n  GaActionEnum[\"BEGIN_CHECKOUT\"] = \"begin_checkout\";\n  GaActionEnum[\"CHECKOUT_PROGRESS\"] = \"checkout_progress\";\n  GaActionEnum[\"GENERATE_LEAD\"] = \"generate_lead\";\n  GaActionEnum[\"LOGIN\"] = \"login\";\n  GaActionEnum[\"PURCHASE\"] = \"purchase\";\n  GaActionEnum[\"REFUND\"] = \"refund\";\n  GaActionEnum[\"REMOVE_FROM_CART\"] = \"remove_from_cart\";\n  GaActionEnum[\"SEARCH\"] = \"search\";\n  GaActionEnum[\"SELECT_CONTENT\"] = \"select_content\";\n  GaActionEnum[\"SET_CHECKOUT_OPTION\"] = \"set_checkout_option\";\n  GaActionEnum[\"SHARE\"] = \"share\";\n  GaActionEnum[\"SIGN_UP\"] = \"sign_up\";\n  GaActionEnum[\"VIEW_ITEM\"] = \"view_item\";\n  GaActionEnum[\"VIEW_ITEM_LIST\"] = \"view_item_list\";\n  GaActionEnum[\"VIEW_PROMOTION\"] = \"view_promotion\";\n  GaActionEnum[\"VIEW_SEARCH_RESULT\"] = \"view_search_results\";\n  GaActionEnum[\"VIEW_SEARCH_RESULTS\"] = \"view_search_results\";\n  return GaActionEnum;\n}(GaActionEnum || {});\n/**\n * Provide a DI Configuration to attach GA Initialization at Angular Startup Cycle.\n */\nconst NGX_GOOGLE_ANALYTICS_INITIALIZER_PROVIDER = {\n  provide: APP_INITIALIZER,\n  multi: true,\n  useFactory: GoogleAnalyticsInitializer,\n  deps: [NGX_GOOGLE_ANALYTICS_SETTINGS_TOKEN, NGX_GTAG_FN, DOCUMENT]\n};\n/**\n * Create a script element on DOM and link it to Google Analytics tracking code URI.\n * After that, execute exactly same init process as tracking snippet code.\n */\nfunction GoogleAnalyticsInitializer(settings, gtag, document) {\n  return () => __awaiter(this, void 0, void 0, function* () {\n    var _a;\n    if (!settings.trackingCode) {\n      if (!isDevMode()) {\n        console.error('Empty tracking code for Google Analytics. Make sure to provide one when initializing NgxGoogleAnalyticsModule.');\n      }\n      return;\n    }\n    if (!gtag) {\n      if (!isDevMode()) {\n        console.error('Was not possible create or read gtag() fn. Make sure this module is running on a Browser w/ access to Window interface.');\n      }\n      return;\n    }\n    if (!document) {\n      if (!isDevMode()) {\n        console.error('Was not possible to access Document interface. Make sure this module is running on a Browser w/ access do Document interface.');\n      }\n    }\n    // Set default ga.js uri\n    settings.uri = settings.uri || `https://www.googletagmanager.com/gtag/js?id=${settings.trackingCode}`;\n    // these commands should run first!\n    settings.initCommands = (_a = settings === null || settings === void 0 ? void 0 : settings.initCommands) !== null && _a !== void 0 ? _a : [];\n    // assert config command\n    if (!settings.initCommands.find(x => x.command === 'config')) {\n      settings.initCommands.unshift({\n        command: 'config',\n        values: [settings.trackingCode]\n      });\n    }\n    // assert js command\n    if (!settings.initCommands.find(x => x.command === 'js')) {\n      settings.initCommands.unshift({\n        command: 'js',\n        values: [new Date()]\n      });\n    }\n    for (const command of settings.initCommands) {\n      gtag(command.command, ...command.values);\n    }\n    const s = document.createElement('script');\n    s.async = true;\n    s.src = settings.uri;\n    if (settings.nonce) {\n      s.setAttribute('nonce', settings.nonce);\n    }\n    const head = document.getElementsByTagName('head')[0];\n    head.appendChild(s);\n  });\n}\n\n/**\n * Provide a Injection Token to global settings.\n */\nconst NGX_GOOGLE_ANALYTICS_ROUTING_SETTINGS_TOKEN = new InjectionToken('ngx-google-analytics-routing-settings', {\n  factory: () => ({})\n});\n\n/**\n * Provide a DI Configuration to attach GA Trigger to Router Events at Angular Startup Cycle.\n */\nconst NGX_GOOGLE_ANALYTICS_ROUTER_INITIALIZER_PROVIDER = {\n  provide: APP_BOOTSTRAP_LISTENER,\n  multi: true,\n  useFactory: GoogleAnalyticsRouterInitializer,\n  deps: [NGX_GOOGLE_ANALYTICS_ROUTING_SETTINGS_TOKEN, GoogleAnalyticsService]\n};\n/**\n * Attach a listener to `NavigationEnd` Router event. So, every time Router finish the page resolution it should call `NavigationEnd` event.\n * We assume that NavigationEnd is the final page resolution and call GA `page_view` command.\n *\n * To avoid double binds, we also destroy the subscription when de Bootstrap Component is destroied. But, we don't know for sure\n * that this strategy does not cause double bind on multiple bootstrap components.\n *\n * We are using de component's injector reference to resolve Router, sou I hope there is no problem w/ double bing.\n *\n * If you have this problem, I encourage not Use NgxGoogleAnalyticsRouterModule and atach the listener on AppComponent initialization.\n */\nfunction GoogleAnalyticsRouterInitializer(settings, gaService) {\n  return c => __awaiter(this, void 0, void 0, function* () {\n    const router = c.injector.get(Router);\n    const {\n      include = [],\n      exclude = []\n    } = settings !== null && settings !== void 0 ? settings : {};\n    const includeRules = normalizePathRules(include);\n    const excludeRules = normalizePathRules(exclude);\n    const subs = router.events.pipe(filter(event => event instanceof NavigationEnd), skip(1),\n    // Prevend double views on the first tigger (because GA Already send one ping on setup)\n    filter(event => includeRules.length > 0 ? includeRules.some(rule => rule.test(event.urlAfterRedirects)) : true), filter(event => excludeRules.length > 0 ? !excludeRules.some(rule => rule.test(event.urlAfterRedirects)) : true)).subscribe(event => gaService.pageView(event.urlAfterRedirects, undefined));\n    // Cleanup\n    c.onDestroy(() => subs.unsubscribe());\n  });\n}\n/** Converts all path rules from string to Regex instances */\nfunction normalizePathRules(rules) {\n  return rules.map(rule => rule instanceof RegExp ? rule : new RegExp(`^${rule.replace('*', '.*')}$`, 'i'));\n}\n\n/**\n * Install Google Analytics Tracking code on your environment and configure tracking ID.\n *\n * This module should be a dependency on the highest level module of the application, i.e. AppModule in most use cases.\n */\nclass NgxGoogleAnalyticsModule {\n  /**\n   * You should provide a valid Google TrackingCode. This code will be provided to the entire application by\n   * `NGX_GOOGLE_ANALYTICS_SETTINGS_TOKEN` token. You can inject this code in you components if you like by\n   * use the following injection code `@Inject(NGX_GOOGLE_ANALYTICS_SETTINGS_TOKEN) gaConfig: IGoogleAnalyticsSettings`\n   *\n   * @param trackingCode The Google Tracking Code\n   * @param initCommands When placed, it will run any GA Commands in sequence after setup GA environment.\n   * @param uri When placed, it will change the default js URI to the provided one.\n   * @param enableTracing When true, trace GA tracking errors on production mode.\n   * @param nonce When placed, nonce will be added to script tag.\n   */\n  static forRoot(trackingCode, initCommands = [], uri, enableTracing, nonce) {\n    return {\n      ngModule: NgxGoogleAnalyticsModule,\n      providers: [{\n        provide: NGX_GOOGLE_ANALYTICS_SETTINGS_TOKEN,\n        useValue: {\n          trackingCode,\n          initCommands,\n          uri,\n          enableTracing,\n          nonce\n        }\n      }, NGX_GOOGLE_ANALYTICS_INITIALIZER_PROVIDER]\n    };\n  }\n}\n/**\n * Attach a listener to `NavigationEnd` Router event. So, every time Router finish the page resolution it should call `NavigationEnd` event.\n * We assume that NavigationEnd is the final page resolution and call GA `page_view` command.\n *\n * To avoid double binds, we also destroy the subscription when de Bootstrap Component is destroied. But, we don't know for sure\n * that this strategy does not cause double bind on multiple bootstrap components.\n *\n * We are using de component's injector reference to resolve Router, sou I hope there is no problem w/ double bing.\n *\n * If you have this problem, I encourage not Use NgxGoogleAnalyticsRouterModule and atach the listener on AppComponent initialization.\n *\n * This Module is just a sugar for:\n *\n```typescript\nconstructor(private router: Router) {}\n...\nngOnInit() {\n  ...\n  this.router\n    .events\n    .pipe(takeUntil(this.onDestroy$))\n    .subscribe(event => {\n      if (event instanceof NavigationEnd) {\n        gaService.pageView(event.urlAfterRedirects, undefined);\n      }\n    });\n```\n */\nclass NgxGoogleAnalyticsRouterModule {\n  static forRoot(settings) {\n    return {\n      ngModule: NgxGoogleAnalyticsRouterModule,\n      providers: [{\n        provide: NGX_GOOGLE_ANALYTICS_ROUTING_SETTINGS_TOKEN,\n        useValue: settings !== null && settings !== void 0 ? settings : {}\n      }]\n    };\n  }\n}\n/*\n * Public API Surface of ngx-google-analytics\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { GaActionEnum, GaEventCategoryDirective, GaEventDirective, GaEventFormInputDirective, GoogleAnalyticsInitializer, GoogleAnalyticsRouterInitializer, GoogleAnalyticsService, NGX_DATA_LAYER, NGX_GOOGLE_ANALYTICS_INITIALIZER_PROVIDER, NGX_GOOGLE_ANALYTICS_ROUTER_INITIALIZER_PROVIDER, NGX_GOOGLE_ANALYTICS_ROUTING_SETTINGS_TOKEN, NGX_GOOGLE_ANALYTICS_SETTINGS_TOKEN, NGX_GTAG_FN, NGX_WINDOW, NgxGoogleAnalyticsModule, NgxGoogleAnalyticsRouterModule, getDataLayerFn, getGtagFn, getWindow };\n//# sourceMappingURL=ngx-google-analytics.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}